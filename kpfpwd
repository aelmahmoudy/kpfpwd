#!/usr/bin/perl
use File::KeePass;
#use Data::Dumper qw(Dumper);
use IO::Prompt;
use Getopt::Long;

# Default config file path:
my $confdir = $ENV{'XDG_CONFIG_DIR'} // "$ENV{'HOME'}/.config";
my $conffile = "$confdir/kpfpwd/config";

# other defaults:
my $default_otp_tag='string:2FA-TOTP-SHA256';
my $escape_method;
my $tag='';
my $keyfile;
my $otp=0;

# Get command line switch params:
GetOptions ("escape=s"  => \$escape_method,
"pwdeval=s" => \$pwdeval,
"dbfile=s" => \$dbfile,
"keyfile=s" => \$keyfile,
"conffile=s" => \$conffile,
"otp" => \$otp,
"tag=s" => \$tag)
or die("Error in command line arguments\n");

# Query is last argument:
my $query = $ARGV[$#ARGV];

# Read configuration file:
open CONFIG, "$conffile";
while (<CONFIG>) {
  chomp;                  # no newline
  s/#.*//;                # no comments
  s/^\s+//;               # no leading white
  s/\s+$//;               # no trailing white
  next unless length;     # anything left?
  my ($var, $value) = split(/\s*=\s*/, $_, 2);
  $conf{$var} = $value;
}
close CONFIG;
$dbfile=$conf{'dbfile'} unless defined $dbfile;
# Replace ~ in path beginning with user home dir:
$dbfile =~ s/^~/$ENV{'HOME'}/;

$pwdeval=$conf{'pwdeval'} unless defined $pwdeval;
$keyfile=$conf{'keyfile'} unless defined $keyfile;

# Read master password from config file:
my $master_pass=$conf{'master_pass'};
# .. or run pwdeval to get it:
$master_pass=`$pwdeval` unless defined $master_pass;
# .. or as final fallback, prompt user for it:
length($master_pass) or $master_pass="".prompt("Password:",-e=>"*",-tty);
# remove trailing newline from master password:
$master_pass =~ s/\n$//;

# Load KeePass database:
my $k = File::KeePass->new;
my $dbpass=[ $master_pass, $keyfile ];
$k->load_db($dbfile, $dbpass); # errors die


# Search the database for entry queried by user:
my @pieces = split '/', $query;

my $entry_title = @pieces[$#pieces];
my $group;
if ($#pieces > 0) {
  my @group_titles = @pieces[0 .. $#pieces-1];
  foreach $group_title (@group_titles) {
    $group_title ne '' or next;
    if(defined $group) {
      $group = $k->find_group({title => $group_title}, [$group], 1);
    }
    else {
      $group = $k->find_group({title => $group_title});
    }
    defined $group or die("$group_title not found");
    #print "\nsearch $group_title:", Dumper $group;;
  }
}
my @entries;
if(defined $group) {
  @entries = $k->find_entries({title => $entry_title}, [$group]);
}
else {
  @entries = $k->find_entries({title => $entry_title});
}

@entries or  die("$entry_title not found");

# Set a sane default tag if not user specified:
if ( $tag eq '') {
  # If requesting OTP, then set it to the 2FA string field:
  if ( $otp  ) {
    $tag=$default_otp_tag;
  }
  # otherwise, set to 'password'
  else {
    $tag = 'password'
  }
}

my $password;
if( $tag eq 'password') {
  $password = $k->locked_entry_password(@entries[0]);
}
else {
  if ( $tag =~ "^string[:/]" ) {
    $tag =~ s/^string[:\/]\s*//;
    $password = @entries[0]->{strings}->{$tag};
  }
  else {
    $password = @entries[0]->{$tag};
  }
}
if( $escape_method ) {
  $password =~ s/\$/\\\$/; # mutt escapes
}

# Screen copy contents to reg:
# readreg [reg] [file]
# Tmux
# set-buffer "text"

# If OTP is requested, use oathtool to request OTP:
if ( $otp ) {
  $password=`oathtool --totp -b '$password'`;
}
print $password; # eq 'somepass'
